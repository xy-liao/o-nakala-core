name: Python Compatibility Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'

jobs:
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        include:
          # Test development dependencies on latest Python
          - python-version: '3.13'
            test-dev-deps: true
          # Test minimal dependencies on oldest Python
          - python-version: '3.9'
            test-minimal: true

    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install System Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install System Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Ensure we have necessary build tools
        xcode-select --install || true
        
    - name: Upgrade pip and setuptools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
    - name: Install package with minimal dependencies
      if: matrix.test-minimal == true
      run: |
        pip install .
        
    - name: Install package with CLI dependencies
      if: matrix.test-minimal != true && matrix.test-dev-deps != true
      run: |
        pip install ".[cli]"
        
    - name: Install package with development dependencies
      if: matrix.test-dev-deps == true
      run: |
        pip install ".[cli,dev,ml]"
        
    - name: Test Basic Import
      run: |
        python -c "import o_nakala_core; print('✅ Basic import successful')"
        python -c "from o_nakala_core.common import NakalaConfig; print('✅ Config import successful')"
        python -c "from o_nakala_core.upload_client import UploadClient; print('✅ Client import successful')"
        
    - name: Test CLI Commands Availability
      if: matrix.test-minimal != true
      run: |
        o-nakala-upload --help
        o-nakala-collection --help
        o-nakala-curator --help
        o-nakala-user-info --help
        o-nakala-preview --help
        echo "✅ All CLI commands available"
        
    - name: Run Core Unit Tests
      run: |
        python -m pytest tests/unit/ -v --tb=short
        
    - name: Run Integration Tests (if dev dependencies)
      if: matrix.test-dev-deps == true
      env:
        NAKALA_API_KEY: "33170cfe-f53c-550b-5fb6-4814ce981293"
        NAKALA_API_URL: "https://apitest.nakala.fr"
      run: |
        python -m pytest tests/integration/ -v --tb=short
        
    - name: Test CSV Processing with Sample Data
      run: |
        python -c "
        from o_nakala_core.common.utils import NakalaCommonUtils
        import os
        if os.path.exists('examples/sample_dataset/folder_data_items.csv'):
            utils = NakalaCommonUtils()
            data = utils.load_csv_data('examples/sample_dataset/folder_data_items.csv')
            print(f'✅ Successfully loaded {len(data)} rows from sample CSV')
        else:
            print('⚠️  Sample dataset not found, skipping CSV test')
        "
        
    - name: Test Package Metadata
      if: matrix.test-dev-deps == true
      run: |
        python -c "
        import o_nakala_core
        import sys
        print(f'Package version: {o_nakala_core.__version__}')
        print(f'Python version: {sys.version}')
        print(f'Platform: {sys.platform}')
        "
        
  compatibility-summary:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: always()
    
    steps:
    - name: Check Overall Results
      run: |
        echo "# Python Compatibility Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Tests completed for Python 3.9 through 3.13 on multiple platforms." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
          echo "✅ **All compatibility tests passed!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The package is confirmed compatible with:" >> $GITHUB_STEP_SUMMARY
          echo "- Python 3.9, 3.10, 3.11, 3.12, 3.13" >> $GITHUB_STEP_SUMMARY
          echo "- Ubuntu, Windows, and macOS" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some compatibility tests failed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the individual job results above for details." >> $GITHUB_STEP_SUMMARY
        fi